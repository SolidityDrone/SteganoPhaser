type TextRecords = {
    [key: string]: string;
};
type CoinTypes = {
    [key: string]: string;
};
type NameData = {
    name: string;
    address: string;
    domain: string;
    text_records?: TextRecords;
    coin_types?: CoinTypes;
};
type DomainData = {
    domain: string;
    address: string;
    text_records?: TextRecords;
    coin_types?: CoinTypes;
};

interface SetNameParams {
    name: string;
    domain: string;
    address: string;
    contenthash?: string;
    text_records?: TextRecords;
    coin_types?: CoinTypes;
}
interface ClaimNameParams {
    name: string;
    domain: string;
    address: string;
    contenthash?: string;
    text_records?: TextRecords;
    coin_types?: CoinTypes;
    single_claim?: number;
}
interface GetNamesParams {
    domain?: string;
    address?: string;
    text_records?: boolean;
    limit?: number;
    offset?: number;
}
interface SearchNamesParams {
    domain: string;
    name: string;
    text_records?: boolean;
    limit?: number;
    exact_match?: boolean;
    offset?: number;
}
interface DeleteNameParams {
    name: string;
    domain: string;
}
interface SetDomainParams {
    domain: string;
    address: string;
    contenthash?: string;
    text_records?: TextRecords;
}
interface GetDomainParams {
    domain: string;
}
interface GetSiweMessageParams {
    address: string;
    domain?: string;
    uri?: string;
}
interface EnableDomainParams {
    company_name: string;
    email: string;
    address: string;
    domain: string;
    signature: string;
    api_key?: string;
    cycle_key?: "0" | "1";
}
interface EnableDomainResponse {
    api_key: string;
}
type NameStoneConfig = {
    network: "sepolia";
    baseUrl?: undefined;
} | {
    network?: undefined;
    baseUrl: string;
};
declare class NameStone {
    private baseUrl;
    private headers;
    /**
     * Creates a NameStone instance.
     * @param apiKey - NameStone API key for authentication.
     * @param config - Configuration options for NameStone.
     */
    constructor(apiKey?: string, config?: NameStoneConfig);
    private request;
    private requestText;
    /**
     * Helper method to check if API key is present for authenticated endpoints
     * @throws {AuthenticationError} If API key is not provided
     */
    private checkApiKey;
    /**
     * Sets a name with associated data.
     * @param params - The parameters for setting a name.
     * @returns A promise that resolves when the name is set.
     * @throws {AuthenticationError} If authentication fails.
     * @throws {NetworkError} If there's a network error.
     */
    setName(params: SetNameParams): Promise<void>;
    /**
     * Claims a name with associated data.
     * @param params - The parameters for claiming a name.
     * @returns A promise that resolves when the name is claimed.
     * @throws {AuthenticationError} If authentication fails.
     * @throws {NetworkError} If there's a network error.
     */
    claimName(params: ClaimNameParams): Promise<void>;
    /**
     * Retrieves names based on specified criteria.
     * @param params - The parameters for retrieving names.
     * @returns A promise that resolves to an array of NameData.
     * @throws {AuthenticationError} If authentication fails.
     * @throws {NetworkError} If there's a network error.
     */
    getNames(params: GetNamesParams): Promise<NameData[]>;
    /**
     * Searches for names based on specified criteria.
     * @param params - The parameters for searching names.
     * @returns A promise that resolves to an array of NameData.
     * @throws {AuthenticationError} If authentication fails.
     * @throws {NetworkError} If there's a network error.
     */
    searchNames(params: SearchNamesParams): Promise<NameData[]>;
    /**
     * Deletes a name from the specified domain.
     * @param params - The parameters for deleting a name.
     * @returns A promise that resolves when the name is deleted.
     * @throws {AuthenticationError} If authentication fails.
     * @throws {NetworkError} If there's a network error.
     */
    deleteName(params: DeleteNameParams): Promise<void>;
    /**
     * Sets domain data.
     * @param params - The parameters for setting a domain.
     * @returns A promise that resolves when the domain is set.
     * @throws {AuthenticationError} If authentication fails.
     * @throws {NetworkError} If there's a network error.
     */
    setDomain(params: SetDomainParams): Promise<void>;
    /**
     * Retrieves domain data.
     * @param domain - Optional domain to retrieve data for.
     * @returns A promise that resolves to an array of DomainData.
     * @throws {AuthenticationError} If authentication fails.
     * @throws {NetworkError} If there's a network error.
     */
    getDomain(params: GetDomainParams): Promise<DomainData[]>;
    getSiweMessage(params: GetSiweMessageParams): Promise<string>;
    /**
     * Enables a new domain for NameStone and returns an API key.
     * Note: Domain resolver must be NameStone's resolver: 0xA87361C4E58B619c390f469B9E6F27d759715125
     * @param params - The parameters for enabling a domain.
     * @returns A promise that resolves to the API key response.
     * @throws {AuthenticationError} If authentication fails.
     * @throws {NetworkError} If there's a network error.
     */
    enableDomain(params: EnableDomainParams): Promise<EnableDomainResponse>;
}

declare class MissingDataError extends Error {
    constructor(message: string);
}
declare class NetworkError extends Error {
    constructor(message: string);
}
declare class AuthenticationError extends Error {
    constructor(message: string);
}

export { AuthenticationError, type CoinTypes, type DomainData, MissingDataError, type NameData, NetworkError, type TextRecords, NameStone as default };
